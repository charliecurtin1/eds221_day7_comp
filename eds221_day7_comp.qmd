---
title: "Day Interactive"
format: html
editor: visual
---

## Data wrangling refresher

```{r}
library(tidyverse)
library(palmerpenguins)
```

1.  starting from penguins, write a single piped sequence in which you include penguins at Dream and Biscoe Islands, remove the year and sex variables, add a new column body mass kg, with penguin mass converted from grams to kg, and rename the island variable to location

```{r}
penguins_sub1 <- penguins %>% 
  filter(island %in% c("Dream", "Biscoe")) %>% 
  select(-year, -sex) %>% 
  mutate(body_mass_kg = body_mass_g / 1000) %>% 
  rename(location = island)
```

starting from penguins, write a single piped sequence to:

-   limit to adelie penguins

-   remove any observations where flipper_length_mm is NA (!is.na() or drop_na()

-   group the data by sex

-   create a summary table that contains, mean, standard deviation, and sample size of flipper lengths for male and female Adelie penguins

```{r}
penguins_sub2 <- penguins %>% 
  filter(species == "Adelie") %>% 
  drop_na(flipper_length_mm, sex) %>% 
  group_by(sex) %>% 
  summarize(mean_length = mean(flipper_length_mm),
            sd_length = sd(flipper_length_mm),
            sample_size = n())

# Or, using !is.na(), which can only use one input
penguins_sub3 <- penguins %>% 
  filter(species == "Adelie", 
         !is.na(flipper_length_mm),
         !is.na(sex)) %>% 
  group_by(sex) %>% 
  summarize(mean_length = mean(flipper_length_mm),
            sd_length = sd(flipper_length_mm),
            sample_size = n())
```

Using count()

```{r}
# count() wraps group_by and summarize and n to get counts of observations. If you want summary statistics, you still want to use all 3 together
penguins %>% 
  count(species, island, sex)
```

```{r}
# using the datapasta add-in, copied and pasted from the day's interactive
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
# using the datapasta add-in, copied and pasted from the day's interactive
locations <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

## practicing joins

full join: full_join(x,y) - (left table, right table)

```{r}
full_join_example <- full_join(animals, locations)
```

```{r}
left_join_example <- left_join(animals, locations)
```

```{r}
inner_join_example <- inner_join(animals, locations)
```

# Date-times with lubridate()

ymd- if date is in year-month-day

mdy- if date is in month-day-year

dmy- if date is in day-month-year

```{r}
date1 <- lubridate::mdy("03-15-1998")

date2<- lubridate::mdy("11/7/2003")

date3 <- lubridate::dmy("08-Jun-1974")

date4 <- lubridate::ymd("19740203")

# can we break it? try a month that has a value that doesnt work, or give it the wrong lubridate function
date5 <- ymd("06-07-2001")
```

# adding times to our dates

```{r}
time_1 <- ymd_hm("2020-08-12 11:18")
```

Parse June 2, 1982 at 4 pm UTC (16:00) as a date

```{r}
time_2 <- mdy_h("June 2, 1982 4 pm")
```

# convert time zones

```{r}
with_tz(time_2, "America/El_Salvador")

# Sys.time()- current time

now <- with_tz(Sys.time(), "America/El_Salvador")
```

# access different parts of date-times

```{r}
lubridate::day(now)

lubridate::week(now)

lubridate::second(now)

hour(now)
```

```{r}
urchin_counts <- data.frame(
  date = c("Oct 12, 2004", "Oct 18, 2007", "February 12, 2003", "February 14, 2008"),
  species = c("purple", "red", "red", "red"),
  size_mm = c(19, 25, 16, 17)
)
```

```{r}
# change date to ISO 8601, add a new column that parses the month, summarize mean size by month
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  mutate(month = month(date)) %>% 
  group_by(month) %>% 
  summarize(mean_size = mean(size_mm, na.rm = TRUE))
```

# strings with stringr

use str_detect() to detect a string pattern

```{r}
my_string <- "I love surfing and hiking and the outdoors"

str_detect(my_string, pattern = "surfing")

str_detect(my_string, pattern = "fuck")
```

```{r}
# detect strings in a vector - looks through the entire vector
my_string2 <- c("burrito", "tacos", "Taco salad", "wet burrito") 

str_detect(my_string2, pattern = "taco")
```

```{r}
# filter based on a string pattern
starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))
```

```{r}
# replace strings based on a string pattern
starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

str_trim to get rid of leading and trailing whitespace

str_squish to get rid of leading and trailing whitespace and excess interior whitespace

```{r}
my_string3 <- "     Hi   my name is     Charlie !!    "

str_trim(my_string3)

str_squish(my_string3)
```

Case conversions

```{r}
str_to_lower(my_string3)

str_to_upper(my_string3)

str_to_title(my_string3)

str_to_sentence(my_string3)

starwars %>% 
  mutate(species_lower = str_to_lower(species))
```
